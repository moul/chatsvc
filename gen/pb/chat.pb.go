// Code generated by protoc-gen-gogo.
// source: chat.proto
// DO NOT EDIT!

/*
Package chatpb is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	ChatRequest
	ChatResponse
*/
package chatpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChatRequest struct {
	SetSender string `protobuf:"bytes,1,opt,name=set_sender,json=setSender,proto3" json:"set_sender,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

func (m *ChatRequest) GetSetSender() string {
	if m != nil {
		return m.SetSender
	}
	return ""
}

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ChatResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Sender  string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *ChatResponse) Reset()                    { *m = ChatResponse{} }
func (m *ChatResponse) String() string            { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()               {}
func (*ChatResponse) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

func (m *ChatResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatResponse) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ChatResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "chat.ChatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/chat.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	Chat(ChatService_ChatServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptorChat) }

var fileDescriptorChat = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0x8f, 0x82, 0x40,
	0x10, 0xc5, 0x6f, 0xef, 0x08, 0x1c, 0x73, 0xd7, 0x38, 0x85, 0x6e, 0x4c, 0x4c, 0x0c, 0x15, 0x15,
	0x31, 0xf2, 0x0d, 0x30, 0xb1, 0xb3, 0x81, 0x4a, 0x1b, 0x02, 0x38, 0x01, 0x0b, 0xfe, 0xb8, 0xb3,
	0xfa, 0xf9, 0x0d, 0xbb, 0x98, 0x60, 0x37, 0x6f, 0xde, 0xcb, 0xcb, 0xef, 0x01, 0x54, 0x4d, 0xa1,
	0xa3, 0x41, 0xf5, 0xba, 0x47, 0x67, 0xbc, 0x83, 0x23, 0xfc, 0x1d, 0x9a, 0x42, 0xa7, 0x74, 0x7f,
	0x10, 0x6b, 0xdc, 0x00, 0x30, 0xe9, 0x9c, 0xa9, 0xbb, 0x92, 0x92, 0x62, 0x2b, 0x42, 0x3f, 0xf5,
	0x99, 0x74, 0x66, 0x1e, 0x28, 0xc1, 0x6b, 0x89, 0xb9, 0xa8, 0x49, 0x7e, 0x1b, 0xef, 0x2d, 0x83,
	0x33, 0xfc, 0xdb, 0x1e, 0x1e, 0xfa, 0x8e, 0x69, 0x9e, 0x14, 0x1f, 0x49, 0x5c, 0x82, 0x3b, 0xd5,
	0xdb, 0x8a, 0x49, 0xe1, 0x0a, 0x3c, 0x52, 0x2a, 0x6f, 0xb9, 0x96, 0x3f, 0xd6, 0x20, 0xa5, 0x4e,
	0x5c, 0xef, 0x13, 0x8b, 0x98, 0x91, 0x7a, 0xde, 0x2a, 0xc2, 0x18, 0x9c, 0x51, 0xe2, 0x22, 0x32,
	0x63, 0x66, 0xf4, 0x6b, 0x9c, 0xbf, 0x2c, 0x48, 0xf0, 0x15, 0x8a, 0x9d, 0x48, 0x7e, 0x2f, 0xee,
	0x68, 0x0d, 0x65, 0xe9, 0x9a, 0xf5, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x8d, 0xca, 0x98,
	0x0b, 0x01, 0x00, 0x00,
}
